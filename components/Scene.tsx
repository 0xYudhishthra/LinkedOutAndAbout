/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.11 scene.gltf --types 
Author: alex.yefremov (https://sketchfab.com/alex.yefremov)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ethereum-logo-53fa5c82850a4b33a366c14994320dcc
Title: Ethereum logo
*/

import * as THREE from 'three'
import React, { Ref, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Pyramid_3_lambert3_0: THREE.Mesh
    Pyramid_3_lambert4_0: THREE.Mesh
    Pyramid_3_lambert2_0: THREE.Mesh
    Pyramid_Default_Material_0: THREE.Mesh
    Pyramid_lambert4_0: THREE.Mesh
    Pyramid_lambert3_0: THREE.Mesh
  }
  materials: {
    lambert3: THREE.MeshStandardMaterial
    lambert4: THREE.MeshStandardMaterial
    lambert2: THREE.MeshStandardMaterial
    Default_Material: THREE.MeshStandardMaterial
  }
}

type ActionName = 'Take 001'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/scene.gltf') as GLTFResult
  // const { actions } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group as Ref<THREE.Group>} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={1.107}>
          <group name="161ee2e266e94c7791940d78a5a83d04fbx" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="eth" rotation={[-Math.PI, -1.556, -Math.PI]} scale={[1, 1, 1.145]}>
                  <group name="Pyramid_3" position={[0.217, 73.807, 0.929]} rotation={[0, Math.PI / 4, 0]}>
                    <mesh name="Pyramid_3_lambert3_0" geometry={nodes.Pyramid_3_lambert3_0.geometry} material={materials.lambert3} />
                    <mesh name="Pyramid_3_lambert4_0" geometry={nodes.Pyramid_3_lambert4_0.geometry} material={materials.lambert4} />
                    <mesh name="Pyramid_3_lambert2_0" geometry={nodes.Pyramid_3_lambert2_0.geometry} material={materials.lambert2} />
                  </group>
                  <group name="Pyramid_1" position={[-0.108, -36.302, 32.916]} rotation={[-Math.PI / 2, 0, -Math.PI]}>
                    <group name="transform1" />
                  </group>
                  <group name="Pyramid_2" position={[-0.108, -36.302, -33.845]} rotation={[-Math.PI / 2, 0, 0]}>
                    <group name="transform2" />
                  </group>
                </group>
                <group name="Pyramid">
                  <mesh name="Pyramid_Default_Material_0" geometry={nodes.Pyramid_Default_Material_0.geometry} material={materials.Default_Material} />
                  <mesh name="Pyramid_lambert4_0" geometry={nodes.Pyramid_lambert4_0.geometry} material={materials.lambert4} />
                  <mesh name="Pyramid_lambert3_0" geometry={nodes.Pyramid_lambert3_0.geometry} material={materials.lambert3} />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/scene.gltf')
